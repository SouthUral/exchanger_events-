package consumermanagement

// Промежуточный потребитель или очередь конкретного подписчика
// Может иметь два состояние, активное/неактивное/сон, в неактичном состоянии просто сохраняет события в очереди

// TODO: общая структура в котой содержится вся текущая информация
// TODO: горутина очереди, в которой происходит загрузка и выгрузка данных из очереди
// TODO: горутина отправки, горутина отправляет события внешнему получателю

// структура промежуточного потребителя
type intermediateConsumer struct {
	name          string        // имя, соответствует имени внешнего потребителя
	currentStatus string        // текущее состояние (active/noactive/sleep)
	inputCh       chan struct{} // канал, по которому приходят события
	outputCh      chan struct{} // канал, по которому события отправляются внешнему потребителю
	lastOffset    int           // оффсет последнего отправленного события
}

// метод: перевод intermediateConsumer в спящий режим.
// Отключение всех активных горутин, после перевода по inputCh не должны поступать события
func (iCons *intermediateConsumer) switchingToSleep() {
}

func queueConsumer() {

}
