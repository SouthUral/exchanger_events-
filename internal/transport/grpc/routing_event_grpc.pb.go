// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: routing_event.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangeEventsClient is the client API for ExchangeEvents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeEventsClient interface {
	SendingEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventID, error)
	SubscribingEvents(ctx context.Context, in *ConsumerData, opts ...grpc.CallOption) (ExchangeEvents_SubscribingEventsClient, error)
}

type exchangeEventsClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeEventsClient(cc grpc.ClientConnInterface) ExchangeEventsClient {
	return &exchangeEventsClient{cc}
}

func (c *exchangeEventsClient) SendingEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventID, error) {
	out := new(EventID)
	err := c.cc.Invoke(ctx, "/exchangeEvents.ExchangeEvents/sendingEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeEventsClient) SubscribingEvents(ctx context.Context, in *ConsumerData, opts ...grpc.CallOption) (ExchangeEvents_SubscribingEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExchangeEvents_ServiceDesc.Streams[0], "/exchangeEvents.ExchangeEvents/subscribingEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeEventsSubscribingEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExchangeEvents_SubscribingEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type exchangeEventsSubscribingEventsClient struct {
	grpc.ClientStream
}

func (x *exchangeEventsSubscribingEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeEventsServer is the server API for ExchangeEvents service.
// All implementations must embed UnimplementedExchangeEventsServer
// for forward compatibility
type ExchangeEventsServer interface {
	SendingEvent(context.Context, *Event) (*EventID, error)
	SubscribingEvents(*ConsumerData, ExchangeEvents_SubscribingEventsServer) error
	mustEmbedUnimplementedExchangeEventsServer()
}

// UnimplementedExchangeEventsServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeEventsServer struct {
}

func (UnimplementedExchangeEventsServer) SendingEvent(context.Context, *Event) (*EventID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendingEvent not implemented")
}
func (UnimplementedExchangeEventsServer) SubscribingEvents(*ConsumerData, ExchangeEvents_SubscribingEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribingEvents not implemented")
}
func (UnimplementedExchangeEventsServer) mustEmbedUnimplementedExchangeEventsServer() {}

// UnsafeExchangeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeEventsServer will
// result in compilation errors.
type UnsafeExchangeEventsServer interface {
	mustEmbedUnimplementedExchangeEventsServer()
}

func RegisterExchangeEventsServer(s grpc.ServiceRegistrar, srv ExchangeEventsServer) {
	s.RegisterService(&ExchangeEvents_ServiceDesc, srv)
}

func _ExchangeEvents_SendingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeEventsServer).SendingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchangeEvents.ExchangeEvents/sendingEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeEventsServer).SendingEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeEvents_SubscribingEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumerData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeEventsServer).SubscribingEvents(m, &exchangeEventsSubscribingEventsServer{stream})
}

type ExchangeEvents_SubscribingEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type exchangeEventsSubscribingEventsServer struct {
	grpc.ServerStream
}

func (x *exchangeEventsSubscribingEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// ExchangeEvents_ServiceDesc is the grpc.ServiceDesc for ExchangeEvents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeEvents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchangeEvents.ExchangeEvents",
	HandlerType: (*ExchangeEventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendingEvent",
			Handler:    _ExchangeEvents_SendingEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribingEvents",
			Handler:       _ExchangeEvents_SubscribingEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routing_event.proto",
}
